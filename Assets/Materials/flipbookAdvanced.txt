Shader "Custom/HDRP/AsyncAnimatedFlipbookSpriteAdvanced"
{
    Properties
    {
        _BaseMap("Flipbook Texture", 2D) = "white" {}

        // General Animation Settings
        _FramesPerSecond("Frames Per Second", Float) = 24
        _TimeOffset("Time Offset", Float) = 0.0 // Global time offset for all tracks

        // --- Auto Settings (Used if keyframe counts are 0) ---
        [Header(Auto Settings)]
        [KeywordEnum(Row, Column, Grid)] _AutoFlipbookType("Auto Flipbook Type", Float) = 2
        _AutoTotalFrames("Auto Total Frames", Int) = 16
        _AutoFramesPerRow("Auto Frames Per Row", Int) = 4
        _AutoFramesPerColumn("Auto Frames Per Column", Int) = 4
        _AutoTint("Auto Tint", Color) = (1,1,1,1)
        _AutoVisibility("Auto Visibility", Range(0, 1)) = 1.0

        // --- Interpolation Settings ---
        [Header(Interpolation)]
        [KeywordEnum(Step, LinearScroll, LinearCrossfade)] _OffsetInterpolation("Offset Interpolation", Float) = 0 // 0:Step, 1:Scroll, 2:Crossfade
        [KeywordEnum(Step, Linear)] _TintInterpolation("Tint Interpolation", Float) = 0 // 0:Step, 1:Linear
        // Draw/Visibility is always Stepped

        // --- Blend Settings ---
        [Header(Blending)]
        [Toggle] _UseEmissive("Use Emissive (Additive) Blending", Float) = 0
        _EmissiveColor("Emissive Color", Color) = (1, 1, 1, 1)
        _EmissiveIntensity("Emissive Intensity", Range(0, 10)) = 1.0
        _Alpha("Global Alpha", Range(0, 1)) = 1.0

        [ToggleUI] _EnableInstancing("Enable Instancing", Float) = 1.0

        // HDRP specific properties
        [HideInInspector] _RenderQueueType("Render Queue Type", Float) = 5 // Transparent
        [HideInInspector] [ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 0.0
        [HideInInspector] _SurfaceType("Surface Type", Float) = 1.0 // Transparent
        [HideInInspector] _BlendMode("Blend Mode", Float) = 0.0 // Alpha
        [HideInInspector] _SrcBlend("Source Blend", Float) = 1.0 // One
        [HideInInspector] _DstBlend("Destination Blend", Float) = 10.0 // OneMinusSrcAlpha
        [HideInInspector] _ZWrite("ZWrite", Float) = 0.0 // Off

        // --- Keyframe Counts (Set via MaterialPropertyBlock) ---
        _OffsetKeyframeCount("Offset Keyframe Count", Int) = 0
        _TintKeyframeCount("Tint Keyframe Count", Int) = 0
        _DrawKeyframeCount("Draw Keyframe Count", Int) = 0
    }

    SubShader
    {
        Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Transparent" "Queue"="Transparent" }

        Pass
        {
            Name "ForwardLit"
            Tags { "LightMode"="ForwardOnly" }

            Blend [_SrcBlend] [_DstBlend]
            ZWrite [_ZWrite]
            ZTest LEqual
            Cull Back

            HLSLPROGRAM
            #pragma target 4.5
            #pragma vertex vert
            #pragma fragment frag

            // --- Shader Features ---
            // Auto modes (only relevant if _OffsetKeyframeCount == 0)
            #pragma shader_feature_local _AUTOFLIPBOOKTYPE_ROW _AUTOFLIPBOOKTYPE_COLUMN _AUTOFLIPBOOKTYPE_GRID
            // Interpolation modes
            #pragma shader_feature_local _OFFSETINTERPOLATION_STEP _OFFSETINTERPOLATION_LINEARSCROLL _OFFSETINTERPOLATION_LINEARCROSSFADE
            #pragma shader_feature_local _TINTINTERPOLATION_STEP _TINTINTERPOLATION_LINEAR
            // Other features
            #pragma shader_feature_local _USEEMISSIVE_ON
            #pragma multi_compile_instancing

            // --- Includes ---
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"

            // --- Keyframe Structures ---
            struct OffsetKeyframe
            {
                float time;
                float4 offsetAndTiling; // xy=offset, zw=tiling
            };

            struct TintKeyframe
            {
                float time;
                float4 color;
            };

            struct DrawKeyframe
            {
                float time;
                float visibility; // 0 or 1
            };

            // --- Structured Buffers ---
            //OffsetKeyframe _OffsetKeyframes[32];
            //TintKeyframe _TintKeyframes[32];
            //DrawKeyframe _DrawKeyframes[32];
            StructuredBuffer<OffsetKeyframe> _OffsetKeyframes;
            StructuredBuffer<TintKeyframe> _TintKeyframes;
            StructuredBuffer<DrawKeyframe> _DrawKeyframes;

            // --- Textures & Samplers ---
            TEXTURE2D(_BaseMap);
            SAMPLER(sampler_BaseMap);

            // --- Uniform Variables ---
            // Counts (must be set via script)
            int _OffsetKeyframeCount = 0;
            int _TintKeyframeCount = 0;
            int _DrawKeyframeCount = 0;

            // General
            float _FramesPerSecond;
            float _TimeOffset;

            // Auto
            int _AutoTotalFrames;
            int _AutoFramesPerRow;
            int _AutoFramesPerColumn;
            float4 _AutoTint = float4(1, 1, 1, 1); // Default white tint
            float _AutoVisibility;

            // Blending
            float4 _EmissiveColor;
            float _EmissiveIntensity;
            float _Alpha; // Global Alpha

            // --- Helper Structs ---
            // Used to store the indices and interpolation factor for a given time
            struct FrameIndicesInfo
            {
                int index0; // Index of the keyframe before or at the current time
                int index1; // Index of the keyframe after the current time
                float t;     // Interpolation factor (0 if at index0, 1 if at index1)
            };

            // --- Structures for Vert/Frag communication ---
            struct Attributes
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
                float4 color : COLOR; // Per-instance color
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varyings
            {
                float4 positionCS : SV_POSITION;
                float2 baseUV : TEXCOORD0;      // Original model UV
                float4 instanceColor : COLOR;   // Per-instance color
                float4 frameTint : TEXCOORD1;   // Calculated tint (interpolated or stepped)
                float visibility : TEXCOORD2;   // Calculated visibility (stepped)
                float debugValue : TEXCOORD6; // Debug value (optional, can be removed)

                // Data for Offset Interpolation
                float4 uvData0 : TEXCOORD3; // Step/Scroll: Final UV | Crossfade: UV Frame 0 (xy=offset, zw=tiling)
                #if defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                    float4 uvData1 : TEXCOORD4; // Crossfade: UV Frame 1 (xy=offset, zw=tiling)
                    float crossfadeLerp : TEXCOORD5; // Crossfade interpolation factor
                #endif

                UNITY_VERTEX_OUTPUT_STEREO
            };


            // --- Helper Functions ---

            // Finds the keyframe indices surrounding a given time point 't_eval' for OFFSET data
            FrameIndicesInfo FindOffsetKeyframeIndices(float t_eval, int count)
            {
                FrameIndicesInfo info;
                info.index0 = 0; info.index1 = 0; info.t = 0.0f;
                if (count == 0) return info;

                for (int i = 0; i < count; ++i) {
                    if (_OffsetKeyframes[i].time <= t_eval) { // Accesses correct buffer
                        info.index0 = i;
                    } else {
                        break;
                    }
                }
                info.index1 = min(info.index0 + 1, count - 1);

                if (info.index0 != info.index1) {
                    float time0 = _OffsetKeyframes[info.index0].time; // Accesses correct buffer
                    float time1 = _OffsetKeyframes[info.index1].time; // Accesses correct buffer
                    info.t = saturate((t_eval - time0) / max(time1 - time0, 1e-6f));
                } else { // At or beyond the last keyframe, or only one keyframe
                    info.t = (_OffsetKeyframes[info.index0].time <= t_eval) ? 1.0f : 0.0f; // Accesses correct buffer
                    if(count == 1) info.t = 1.0f;
                }
                // Note: Simplified the 'exactly on last frame' logic slightly for clarity,
                // the core issue is buffer access. Adjust if needed.
                return info;
            }

            // Finds the keyframe indices surrounding a given time point 't_eval' for TINT data
            FrameIndicesInfo FindTintKeyframeIndices(float t_eval, int count)
            {
                FrameIndicesInfo info;
                info.index0 = 0; info.index1 = 0; info.t = 0.0f;
                if (count == 0) return info;

                for (int i = 0; i < count; ++i) {
                    if (_TintKeyframes[i].time <= t_eval) { // Accesses correct buffer
                        info.index0 = i;
                    } else {
                        break;
                    }
                }
                info.index1 = min(info.index0 + 1, count - 1);

                if (info.index0 != info.index1) {
                    float time0 = _TintKeyframes[info.index0].time; // Accesses correct buffer
                    float time1 = _TintKeyframes[info.index1].time; // Accesses correct buffer
                    info.t = saturate((t_eval - time0) / max(time1 - time0, 1e-6f));
                } else {
                    info.t = (_TintKeyframes[info.index0].time <= t_eval) ? 1.0f : 0.0f; // Accesses correct buffer
                    if(count == 1) info.t = 1.0f;
                }
                return info;
            }

            // Finds the keyframe indices surrounding a given time point 't_eval' for DRAW data
            FrameIndicesInfo FindDrawKeyframeIndices(float t_eval, int count)
            {
                FrameIndicesInfo info;
                info.index0 = 0; info.index1 = 0; info.t = 0.0f; // t is not used for Draw, but keep struct consistent
                if (count == 0) return info;

                for (int i = 0; i < count; ++i) {
                    if (_DrawKeyframes[i].time <= t_eval) { // Accesses correct buffer
                        info.index0 = i;
                    } else {
                        break;
                    }
                }
                // index1 and t are not needed for Draw as it's always stepped using index0
                info.index1 = info.index0;
                info.t = 0.0f;
                return info;
            }

            float4 AutoOffsetFrame(float t_eval)
            {
                // Use standard grid/row/column based on Auto settings
                float autoFrameTime = 1.0 / max(0.001, _FramesPerSecond);
                float fbTileX=1, fbTileY=1, fbOffsetX=0, fbOffsetY=0;
                
                #if defined(_OFFSETINTERPOLATION_STEP)
                    int autoCurrentFrame = fmod(t_eval / autoFrameTime, (float)_AutoTotalFrames);
                #elif defined(_OFFSETINTERPOLATION_LINEARSCROLL) || defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                    float autoCurrentFrame = fmod(t_eval / autoFrameTime, (float)_AutoTotalFrames);
                #endif

                #if defined(_AUTOFLIPBOOKTYPE_ROW)
                   fbTileX = 1.0 / _AutoFramesPerRow;
                   fbOffsetX = (float)autoCurrentFrame * fbTileX;
                #elif defined(_AUTOFLIPBOOKTYPE_COLUMN)
                   fbTileY = 1.0 / _AutoFramesPerColumn;
                   fbOffsetY = (float)autoCurrentFrame * fbTileY;
                #else // GRID
                   fbTileX = 1.0 / _AutoFramesPerRow;
                   fbTileY = 1.0 / _AutoFramesPerColumn;
                   
                   // step and crossfade use int, scroll uses float, because linear is interpolating between two frames
                    #if defined(_OFFSETINTERPOLATION_STEP) || defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                        int fbRow = autoCurrentFrame / _AutoFramesPerRow;
                        int fbCol = autoCurrentFrame % _AutoFramesPerRow;
                    #elif defined(_OFFSETINTERPOLATION_LINEARSCROLL) 
                        float fbRow = autoCurrentFrame / _AutoFramesPerRow;
                        float fbCol = autoCurrentFrame % _AutoFramesPerRow;
                    #endif
                   fbOffsetX = (float)fbCol * fbTileX;
                   fbOffsetY = (float)fbRow * fbTileY;
                #endif
                return float4(fbOffsetX, fbOffsetY, fbTileX, fbTileY);
            }
            
             // --- Vertex Shader ---
            Varyings vert(Attributes input)
            {
                Varyings output;
                UNITY_SETUP_INSTANCE_ID(input);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);
                
                output.positionCS = TransformObjectToHClip(input.positionOS.xyz);
                output.baseUV = input.uv; // Store original UV
                output.instanceColor = input.color;
                
                // Use _Time.y for game time. Could also pass custom time via MaterialPropertyBlock.
                float totalTime = _Time.y + _TimeOffset;
                float adjustedTime = fmod(totalTime, _FramesPerSecond > 0 ? (1.0 / _FramesPerSecond) * _AutoTotalFrames : 1.0); // Example: Loop based on auto total frames duration
                

                // --- Calculate Offset/Tiling ---
                float4 uvOffsetTiling0 = float4(0,0,1,1); // Default: offset(0,0) tiling(1,1)
                float4 uvOffsetTiling1 = uvOffsetTiling0; // For crossfade
                float crossfadeT = 0.0f;

                if (_OffsetKeyframeCount > 0)
                {
                   
                    FrameIndicesInfo offsetInfo = FindOffsetKeyframeIndices(adjustedTime, _OffsetKeyframeCount);
                    uvOffsetTiling0 = _OffsetKeyframes[offsetInfo.index0].offsetAndTiling;

                    #if defined(_OFFSETINTERPOLATION_STEP)
                        // Use uvOffsetTiling0 directly
                    #elif defined(_OFFSETINTERPOLATION_LINEARSCROLL) || defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                        uvOffsetTiling1 = _OffsetKeyframes[offsetInfo.index1].offsetAndTiling;
                        crossfadeT = offsetInfo.t;
                        if(offsetInfo.index0 != offsetInfo.index1) {
                             float time0 = _OffsetKeyframes[offsetInfo.index0].time;
                             float time1 = _OffsetKeyframes[offsetInfo.index1].time;
                             crossfadeT = saturate((adjustedTime - time0) / max(time1 - time0, 1e-6f));
                        } else {
                             crossfadeT = (offsetInfo.t > 0.5) ? 1.0 : 0.0; // Handle edge case: stay on frame
                        }
                        
                        #if defined(_OFFSETINTERPOLATION_LINEARSCROLL)
                            // Interpolate only offset (xy), use tiling from frame 0 (zw)
                            float2 interpolatedOffset = lerp(uvOffsetTiling0.xy, uvOffsetTiling1.xy, crossfadeT);
                            uvOffsetTiling0 = float4(interpolatedOffset, uvOffsetTiling0.zw); // Store result in uvData0
                        #elif defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                             // Pass both frames' data and lerp factor to fragment shader
                             output.crossfadeLerp = crossfadeT;
                        #endif
                    #endif
                    
                }
                else // Auto calculation
                {
                    uvOffsetTiling0 = AutoOffsetFrame(adjustedTime); // Use auto settings to calculate offset/tiling
                    #if defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                        uvOffsetTiling1 = AutoOffsetFrame(adjustedTime + 1.0/_FramesPerSecond); // Use next frame for crossfade
                        crossfadeT = fmod(adjustedTime, 1.0 / _FramesPerSecond) * _FramesPerSecond; // Interpolation factor for crossfade
                        output.crossfadeLerp = crossfadeT;
                    #endif
                }

                // Store UV data for fragment shader
                output.uvData0 = uvOffsetTiling0;
                #if defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                    output.uvData1 = uvOffsetTiling1; // Only needed for crossfade
                #endif
                
                // --- Calculate Tint ---
                float4 tint = _AutoTint;
                tint = float4(1,1,1,1); // Default: white tint
                if (_TintKeyframeCount > 0)
                {
                    FrameIndicesInfo tintInfo = FindTintKeyframeIndices(adjustedTime, _TintKeyframeCount);
                    float4 tint0 = _TintKeyframes[tintInfo.index0].color;

                    #if defined(_TINTINTERPOLATION_STEP)
                        tint = tint0;
                    #elif defined(_TINTINTERPOLATION_LINEAR)
                        float4 tint1 = _TintKeyframes[tintInfo.index1].color;
                        tint = lerp(tint0, tint1, tintInfo.t);
                        //  if(tintInfo.index0 != tintInfo.index1) {
                        //      float time0 = _TintKeyframes[tintInfo.index0].time;
                        //      float time1 = _TintKeyframes[tintInfo.index1].time;
                        //      float t = saturate((adjustedTime - time0) / max(time1 - time0, 1e-6f));
                        //      tint = lerp(tint0, tint1, t);
                        //  } else {
                        //      tint = tint0; // Stay on frame
                        //  }

                    #endif
                }
                output.frameTint = tint;
                
                // --- Calculate Visibility ---
                float visibility = _AutoVisibility;
                if (_DrawKeyframeCount > 0)
                {
                    // Visibility is always stepped
                    FrameIndicesInfo drawInfo = FindDrawKeyframeIndices(adjustedTime, _DrawKeyframeCount);
                    visibility = _DrawKeyframes[drawInfo.index0].visibility;
                }
                output.visibility = visibility;

                return output;
            }

            // --- Fragment Shader ---
            float4 frag(Varyings input) : SV_Target
            {
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);

                // --- Visibility Check ---
                clip(input.visibility > 0 ? 1 : -1); // Discard if not visible
                //return input.debugValue;

                // --- Calculate Final UVs and Sample Texture ---
                float4 finalColor;

                #if defined(_OFFSETINTERPOLATION_LINEARCROSSFADE)
                    // Cross-fade requires two texture samples
                    float2 uv0 = input.baseUV * input.uvData0.zw + input.uvData0.xy;
                    float4 color0 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv0);

                    float2 uv1 = input.baseUV * input.uvData1.zw + input.uvData1.xy;
                    float4 color1 = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv1);

                    finalColor = lerp(color0, color1, input.crossfadeLerp);
                #else
                    // Step or LinearScroll: Only need one sample
                    float2 uv = input.baseUV * input.uvData0.zw + input.uvData0.xy;
                    finalColor = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);
                #endif


                // --- Apply Colors and Alpha ---
                // 1. Instance Color
                finalColor *= input.instanceColor;
                // 2. Frame Tint
                finalColor *= input.frameTint;

                // 3. Emissive
                #if defined(_USEEMISSIVE_ON)
                    finalColor.rgb *= _EmissiveColor.rgb * _EmissiveIntensity;
                #endif

                // 4. Global Alpha
                finalColor.a *= _Alpha;

                return finalColor;
            }
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.Rendering.HighDefinition.HDLitGUI" // Keep default editor for HDRP
}